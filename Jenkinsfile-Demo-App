pipeline{
    agent any
    tools {
        maven 'maven3'
    }
    environment {
        DOCKER_TAG = getCommitHash()
        MAVEN_POM=readMavenPom file: 'pom.xml'
        VERSION="${MAVEN_POM.version}"
    }
    stages{
        stage("SCM"){
            steps{
                echo "${VERSION}"
                git branch: 'main', credentialsId: 'github', url: 'https://github.com/ashishtkumar/demo.git'
            }
        }
        stage("Maven Build"){
            steps{
                sh 'mvn clean package'
            }
        }
        stage("Uplaod to Nexus"){
            steps{
                script{
                    nexusArtifactUploader artifacts: [
                        [
                            artifactId: 'myweb', 
                            classifier: '', 
                            file: "target/myweb-${VERSION}.war", 
                            type: 'war'
                        ]
                    ], 
                    credentialsId: 'nexus3', 
                    groupId: 'in.javahome', 
                    nexusUrl: 'localhost:8081', 
                    nexusVersion: 'nexus3', 
                    protocol: 'http', 
                    repository: 'demo-release', 
                    version: "${VERSION}"
                }
            }
        }
        stage("SonarQube Analysis"){
            steps{
                def mvnHome= tool name: 'maven3', type: 'maven'
                withSonarQubeEnv('sonar-6'){
                    sh "${mvnHome}/bin/mvn sonar:sonar"
                }
            }
        }        
        stage("Docker Bulid"){
            steps{
                sh "docker build . --build-arg ver=${VERSION} -t ashishvkumar/demo:${DOCKER_TAG}"
            }
        }
        stage("Dockerhub Push"){
            steps{
                withCredentials([string(credentialsId: 'dockerhub', variable: 'dockerhubPwd')]) {
                    sh 'docker login -uashishvkumar -p${dockerhubPwd} '
                }
                
                sh "docker push ashishvkumar/demo:${DOCKER_TAG}"
            }
        }
        stage("Docker Deploy"){
            steps{
                ansiblePlaybook credentialsId: 'tomcat-dev', disableHostKeyChecking: true, extras: "-e DOCKER_TAG=${DOCKER_TAG}", installation: 'ansible', inventory: 'dev.inv', playbook: 'docker-deploy.yml'
            }
        }
    }
}
def getCommitHash(){
    def commitHash=sh label: '', returnStdout: true, script: 'git rev-parse --short HEAD'
    return commitHash
}
